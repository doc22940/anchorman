---
# settings / rules for the replacement process: item, link, element

rules:
    # Replacement rules and filter
    # # 1. how many items will be replaced at all: default all else int n
    replaces_at_all: null
    # # 2. case sensitive replacement
    # # Input term has to be exact match in text.
    case_sensitive: true
    # # 3. one item different surface forms
    # # how many times should the one applied 
    # replaces_per_element:
    #     number: 1
    #     key: akey from element attributes
    # # 4. how many items will be replaced per unit
    items_per_unit: null # | 5
    # # 5.3 apply sorted items
    # # items will placed per default in order they appear in the text,
    # # but if they should be added sorted based on e.g. score
    # sort_by_item_value:
    #     key: score
    #     default: 0

    # !the following changed - form version 0.4 to 0.5!
    # replaces:
    #         by_attribute:
    #             key: value
    #             value_per_unit: 1
    #             value_overall: 2

    # # 5.4 Filter items against an element attrbute of type x
    # # and show items_per_unit per attribute 
    # # ...what about multiple attributes?!
    # replaces_by_attribute:
    #       key: value
    #       value_per_unit: 1
    #       value_overall: 2

    # n_times_key_value:
    #       key: value
    #       value_per_unit: 1

    # TBD: Filter items by specific value of its attribute
    # filter_by_attribute:
    #     # strict: false   # check only one, true only valid if all match
    #     attributes:
    #         - key: type
    #           value: animal
    #         - key: score
    #           value: 10

settings:
    # # 1. return applied links and rest with the result 
    # return_applied_links: True
    log_level: INFO # DEBUG
    # ?? # 2. define the text structure
    # # options to guide the input parsing process
    # # p and html-paragraph is on per default and these
    text_unit:
        key: p
        name: html-paragraph
        # key, name: t, text
    # # # # param to exclude areas from anchormanning
    forbidden_areas:
        tags:
            # - img
            - a
        # classes:
        #     - first
    # todo check the benchmark for each solution
    # https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser
    # html.parser produces false elements, see <img>somthing something
    # parser: html.parser ...
    # parser: html5lib # need pip install ...slow
    parser: lxml # need pip install
    # # 4. do not link inside of a < here >
    no_links_inside_tags: True

markup:
    # Markup for html-tags
    # a pattern filled by the attributes of a candidates
    anchor_pattern: '<a class="{class}">{token}</a>'
    decorate_anchor_key: 'the_anchor'
    # the not linked candidates and candidates all may be decorated
    # decorate:
    # #     tag: span
    #     attributes:
    #         - class
    #     default_attribute_values:
    #         class: anchorman_decorator
    #     decorate_pattern: '<span class="{class}">{the_anchor}</span>'

    # # # incase to remove the anchors we need to identify them
    # remove_tag: a
    # remove_by_attribute:
    #     class: anchorman
