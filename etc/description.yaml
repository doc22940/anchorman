
rules:
    # # Replacement rules and filter
    
    # Todo:
    # longest_match_first

    # # 1. how many items will be replaced at all
    # # default all, otherwise int
    replaces_at_all: null

    # # 2. case sensitive replacement
    # # Input term has to be exact match in text.
    case_sensitive: true

    # # 3. one item different surface forms
    # # how many times should the one applied 
    # replaces_per_element:
    #     number: 1
    #     key: akey from element attributes

    items_per_unit: null # | 5

    # # 5.3 apply sorted items
    # # items will placed per default in order they 
    # # appear in the text, but if they should be added
    # # based on e.g. score, higher scored items first

    # sort_by_item_value:
    #     key: score
    #     default: 0

    # # 5.4 Filter items against an element attrbute of type x
    # # and show items_per_unit per attribute 
    # # ...what about multiple attributes?!
    # replaces:
    #         by_attribute:
    #             key: value
    #             value_per_unit: 1
    #             value_overall: 2

    # TBD: Filter items by specific value of its attribute
    # filter_by_attribute:
    #     # strict: false   # check only one, true only valid if all match
    #     attributes:
    #         - key: type
    #           value: animal
    #         - key: score
    #           value: 10


# settings / rules for the replacement process
# item, link, element ..all reference to the same
# concept in the following
settings:
    # # 1. return applied links and rest with the result 
    # return_applied_links: True
    
    log_level: INFO # DEBUG
    # # 2. define the text structure
    # # options to guide the input parsing process
    # # p and html-paragraph is on per default and these
    text_unit:
        key: p
        name: html-paragraph
        # key: t
        # name: text
        # key: s
        # name: sentence

    # # # # param to exclude areas from anchormanning
    forbidden_areas:
        tags:
            # - img
            - a
        # classes:
        #     - first

    # todo check the benchmark for each solution
    # https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser
    # html.parser produces false elements, see <img>somthing something
    # parser: html.parser ...
    # parser: html5lib # need pip install ...slow
    parser: lxml # need pip install

    # # 4. Identify the items in the intervall tree
    element_identifier: entity

    # # 5. do not link inside of a < here >
    no_links_inside_tags: True


markup:

    # Markup for html-tags
    tag: a
    # value_key not used anymore > use some logic for replace the original
    # with a value of the data > text replace with

    # Default attributes for tag markup, overwrite it!
    attributes:
        class:
            anchorman

    # # Exclude keys from the input to be rendered.
    # exclude_keys:
    #     - score
    #     - type
